(globalThis.webpackChunkbox_ui_elements=globalThis.webpackChunkbox_ui_elements||[]).push([[29811],{"./src/components/tooltip/Tooltip.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,attachedToDisabledButton:()=>attachedToDisabledButton,default:()=>Tooltip_stories,isShown:()=>isShown,positioning:()=>positioning,themes:()=>themes,withCloseButton:()=>withCloseButton,withDisabled:()=>withDisabled,withLongText:()=>withLongText,withOffset:()=>withOffset});var react=__webpack_require__("./node_modules/react/index.js"),Button=__webpack_require__("./src/components/button/Button.tsx"),Tooltip=__webpack_require__("./src/components/tooltip/Tooltip.tsx");const addSpacing=component=>react.createElement("div",{style:{textAlign:"center",marginTop:"125px",marginBottom:"125px"}},component),positioning=()=>addSpacing(react.createElement("div",null,react.createElement(Tooltip.Ay,{isShown:!0,position:Tooltip.Zj.TOP_CENTER,text:"tooltips are constrained to window by default so if you scroll until there is no room for this tooltip above the button, it will flip below the button"},react.createElement(Button.A,null,"top center"))));positioning.story={name:"Positioning"};const themes=()=>addSpacing(react.createElement(Tooltip.Ay,{isShown:!0,position:Tooltip.Zj.TOP_RIGHT,text:"Theme this tooltip",theme:Tooltip.ts.CALLOUT},react.createElement(Button.A,null,"Theme Option: callout")));themes.story={name:"Themes"};const withCloseButton=()=>addSpacing(react.createElement(Tooltip.Ay,{isShown:!0,position:Tooltip.Zj.TOP_CENTER,showCloseButton:!0,text:"Tooltips can have a close button and still work even if the text is long and wrapping",theme:Tooltip.ts.DEFAULT},react.createElement(Button.A,null,"Learn more")));withCloseButton.story={name:"With close button"};const isShown=()=>addSpacing(react.createElement(Tooltip.Ay,{isShown:!0,text:"Force show or hide"},react.createElement(Button.A,null,"Learn more")));isShown.story={name:"Force show and hide"};const withOffset=()=>addSpacing(react.createElement(Tooltip.Ay,{isShown:!0,position:Tooltip.Zj.MIDDLE_LEFT,text:"this tooltip has 20px offset",offset:"0 20px"},react.createElement(Button.A,null,"Learn more")));withOffset.story={name:"With offset"};const withDisabled=()=>addSpacing(react.createElement(Tooltip.Ay,{isDisabled:!0,position:Tooltip.Zj.MIDDLE_RIGHT,text:"controlled tooltip that is shown based only on the isDisabled prop"},react.createElement(Button.A,null,"Learn more")));withDisabled.story={name:"With disabled tooltip"};const attachedToDisabledButton=()=>addSpacing(react.createElement(Tooltip.Ay,{text:"Tooltip works on disabled buttons"},react.createElement(Button.A,{isDisabled:!0},"Save changes")));attachedToDisabledButton.story={name:"Attached to disabled button"};const withLongText=()=>addSpacing(react.createElement(Tooltip.Ay,{position:Tooltip.Zj.MIDDLE_LEFT,text:"this is a long tooltip that will addSpacing past 200px width, add a tooltipClass to override"},react.createElement(Button.A,null,"Learn more")));withLongText.story={name:"With long tooltip text"};const Tooltip_stories={title:"Components/Tooltip",component:Tooltip.Ay,parameters:{notes:"`import Tooltip from 'box-ui-elements/es/components/tooltip';`\n"}},__namedExportsOrder=["positioning","themes","withCloseButton","isShown","withOffset","withDisabled","attachedToDisabledButton","withLongText"];positioning.parameters={...positioning.parameters,docs:{...positioning.parameters?.docs,source:{originalSource:'() => {\n  return addSpacing(<div>\n            <Tooltip isShown position={TooltipPosition.TOP_CENTER} text="tooltips are constrained to window by default so if you scroll until there is no room for this tooltip above the button, it will flip below the button">\n                <Button>top center</Button>\n            </Tooltip>\n        </div>);\n}',...positioning.parameters?.docs?.source}}},themes.parameters={...themes.parameters,docs:{...themes.parameters?.docs,source:{originalSource:'() => {\n  return addSpacing(<Tooltip isShown position={TooltipPosition.TOP_RIGHT} text="Theme this tooltip" theme={TooltipTheme.CALLOUT}>\n            <Button>Theme Option: callout</Button>\n        </Tooltip>);\n}',...themes.parameters?.docs?.source}}},withCloseButton.parameters={...withCloseButton.parameters,docs:{...withCloseButton.parameters?.docs,source:{originalSource:'() => {\n  return addSpacing(<Tooltip isShown position={TooltipPosition.TOP_CENTER} showCloseButton text="Tooltips can have a close button and still work even if the text is long and wrapping" theme={TooltipTheme.DEFAULT}>\n            <Button>Learn more</Button>\n        </Tooltip>);\n}',...withCloseButton.parameters?.docs?.source}}},isShown.parameters={...isShown.parameters,docs:{...isShown.parameters?.docs,source:{originalSource:'() => addSpacing(<Tooltip isShown text="Force show or hide">\n            <Button>Learn more</Button>\n        </Tooltip>)',...isShown.parameters?.docs?.source}}},withOffset.parameters={...withOffset.parameters,docs:{...withOffset.parameters?.docs,source:{originalSource:'() => {\n  return addSpacing(<Tooltip isShown position={TooltipPosition.MIDDLE_LEFT} text="this tooltip has 20px offset" offset="0 20px">\n            <Button>Learn more</Button>\n        </Tooltip>);\n}',...withOffset.parameters?.docs?.source}}},withDisabled.parameters={...withDisabled.parameters,docs:{...withDisabled.parameters?.docs,source:{originalSource:'() => addSpacing(<Tooltip isDisabled position={TooltipPosition.MIDDLE_RIGHT} text="controlled tooltip that is shown based only on the isDisabled prop">\n            <Button>Learn more</Button>\n        </Tooltip>)',...withDisabled.parameters?.docs?.source}}},attachedToDisabledButton.parameters={...attachedToDisabledButton.parameters,docs:{...attachedToDisabledButton.parameters?.docs,source:{originalSource:'() => addSpacing(<Tooltip text="Tooltip works on disabled buttons">\n            <Button isDisabled>Save changes</Button>\n        </Tooltip>)',...attachedToDisabledButton.parameters?.docs?.source}}},withLongText.parameters={...withLongText.parameters,docs:{...withLongText.parameters?.docs,source:{originalSource:'() => addSpacing(<Tooltip position={TooltipPosition.MIDDLE_LEFT} text="this is a long tooltip that will addSpacing past 200px width, add a tooltipClass to override">\n            <Button>Learn more</Button>\n        </Tooltip>)',...withLongText.parameters?.docs?.source}}}},"./node_modules/lodash/get.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseGet=__webpack_require__("./node_modules/lodash/_baseGet.js");module.exports=function get(object,path,defaultValue){var result=null==object?void 0:baseGet(object,path);return void 0===result?defaultValue:result}},"./node_modules/lodash/noop.js":module=>{module.exports=function noop(){}},"./node_modules/react-intl/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{XU:()=>FormattedDate,Gr:()=>FormattedNumber,YK:()=>defineMessages});var DisplayName,DisplayNameParts,tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),react=__webpack_require__("./node_modules/react/index.js"),components_useIntl=__webpack_require__("./node_modules/react-intl/lib/src/components/useIntl.js");!function(DisplayName){DisplayName.formatDate="FormattedDate",DisplayName.formatTime="FormattedTime",DisplayName.formatNumber="FormattedNumber",DisplayName.formatList="FormattedList",DisplayName.formatDisplayName="FormattedDisplayName"}(DisplayName||(DisplayName={})),function(DisplayNameParts){DisplayNameParts.formatDate="FormattedDateParts",DisplayNameParts.formatTime="FormattedTimeParts",DisplayNameParts.formatNumber="FormattedNumberParts",DisplayNameParts.formatList="FormattedListParts"}(DisplayNameParts||(DisplayNameParts={}));var FormattedNumberParts=function(props){var intl=(0,components_useIntl.A)(),value=props.value,children=props.children,formatProps=(0,tslib_es6.Tt)(props,["value","children"]);return children(intl.formatNumberToParts(value,formatProps))};FormattedNumberParts.displayName="FormattedNumberParts";function createFormattedDateTimePartsComponent(name){var ComponentParts=function(props){var intl=(0,components_useIntl.A)(),value=props.value,children=props.children,formatProps=(0,tslib_es6.Tt)(props,["value","children"]),date="string"==typeof value?new Date(value||0):value;return children("formatDate"===name?intl.formatDateToParts(date,formatProps):intl.formatTimeToParts(date,formatProps))};return ComponentParts.displayName=DisplayNameParts[name],ComponentParts}function createFormattedComponent(name){var Component=function(props){var intl=(0,components_useIntl.A)(),value=props.value,children=props.children,formatProps=(0,tslib_es6.Tt)(props,["value","children"]),formattedValue=intl[name](value,formatProps);if("function"==typeof children)return children(formattedValue);var Text=intl.textComponent||react.Fragment;return react.createElement(Text,null,formattedValue)};return Component.displayName=DisplayName[name],Component}function defineMessages(msgs){return msgs}FormattedNumberParts.displayName="FormattedNumberParts";var FormattedDate=createFormattedComponent("formatDate"),FormattedNumber=(createFormattedComponent("formatTime"),createFormattedComponent("formatNumber"));createFormattedComponent("formatList"),createFormattedComponent("formatDisplayName"),createFormattedDateTimePartsComponent("formatDate"),createFormattedDateTimePartsComponent("formatTime")},"./node_modules/react-intl/lib/src/components/useIntl.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>useIntl});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_injectIntl__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-intl/lib/src/components/injectIntl.js"),_utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-intl/lib/src/utils.js");function useIntl(){var intl=react__WEBPACK_IMPORTED_MODULE_0__.useContext(_injectIntl__WEBPACK_IMPORTED_MODULE_1__.ob);return(0,_utils__WEBPACK_IMPORTED_MODULE_2__.HM)(intl),intl}}}]);